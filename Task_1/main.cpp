#include <iostream>
#include "BranchAndBound.h"

// Hlavní funkce pro inicializaci dat a spuštění Branch and Bound
int main() {
    // Zadání dat pro SRFLP
    std::vector<int> widths = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}; // Šířky zařízení
    std::vector<std::vector<int>> weights = {
        {0, 30, 17, 11, 24, 25, 24, 17, 16, 22},
        {30, 0, 21, 23, 26, 24, 27, 19, 11, 32},
        {17, 21, 0, 24, 18, 23, 31, 36, 28, 19},
        {11, 23, 24, 0, 19, 18, 33, 25, 20, 28},
        {24, 26, 18, 19, 0, 15, 37, 27, 17, 16},
        {25, 24, 23, 18, 15, 0, 27, 23, 29, 24},
        {24, 27, 31, 33, 37, 27, 0, 27, 31, 24},
        {17, 19, 36, 25, 27, 23, 27, 0, 14, 18},
        {16, 11, 28, 20, 17, 29, 31, 14, 0, 24},
        {22, 32, 19, 28, 16, 24, 24, 18, 24, 0}
    };

    //Make widths2 and weights2 much harder to solve

    std::vector<int> widths2 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // Šířky zařízení
    std::vector<std::vector<int>> weights2 = {
        {0, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {30, 0, 21, 23, 26, 24, 27, 19, 11, 32, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {17, 21, 0, 24, 18, 23, 31, 36, 28, 19, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {11, 23, 24, 0, 19, 18, 33, 25, 20, 28, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {24, 26, 18, 19, 0, 15, 37, 27, 17, 16, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {25, 24, 23, 18, 15, 0, 27, 23, 29, 24, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {24, 27, 31, 33, 37, 27, 0, 27, 31, 24, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {17, 19, 36, 25, 27, 23, 27, 0, 14, 18, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {16 ,11, 28, 20, 17, 29, 31, 14, 0, 24, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {22, 32, 19, 28, 16, 24, 24, 18, 24, 0, 30, 17, 11, 24, 25, 24, 17, 16, 22, 30},
        {30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 0, 30, 30, 30, 30, 30, 30, 30, 30, 30},
        {17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 30, 0, 30, 30, 30, 30, 30, 30, 30, 30},
        {11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 30, 30, 0, 30, 30, 30, 30, 30, 30, 30},
        {24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 30, 30, 30, 0, 30, 30, 30, 30, 30, 30},
        {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 30, 30, 30, 30, 0, 30, 30, 30, 30, 30},
        {24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 30, 30, 30, 30, 30, 0, 30, 30, 30, 30},
        {17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 30, 30, 30, 30, 30, 30, 0, 30, 30, 30},
        {16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 30, 30, 30, 30, 30, 30, 30, 0, 30, 30},
        {22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 30, 30, 30, 30, 30, 30, 30, 30, 0, 30},
        {42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 30, 30, 30, 30, 30, 30, 30, 30, 30, 0}};


    int totalThreads = omp_get_max_threads();
    std::cout << "Total threads: " << totalThreads << std::endl;

    double start = omp_get_wtime();
    BranchAndBound solver(widths, weights);
    solver.solve();
    double end = omp_get_wtime();
    solver.printBest();
    //print time
    std::cout << "Time: " << std::fixed << std::setprecision(6) << end - start << " s\n";

    return 0;
}